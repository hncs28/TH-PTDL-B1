import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import MinMaxScaler, StandardScaler
from sklearn.feature_selection import SelectKBest, f_classif
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, f1_score, precision_score, roc_auc_score, confusion_matrix
import matplotlib.pyplot as plt

# Đọc dữ liệu từ file CSV
data = pd.read_csv("framingham.csv")

# Câu 1
print("Câu 1:")
print("Số lượng features:", len(data.columns))
print("Số lượng samples:", len(data))

# Câu 2
print("\nCâu 2:")
missing_data = data.isnull().sum()
if missing_data.any():
    print("Dữ liệu có missing data.")
    print(missing_data)
else:
    print("Dữ liệu không có missing data.")

# Câu 3
print("\nCâu 3:")
imputer = SimpleImputer(strategy='mean')
data_imputed = pd.DataFrame(imputer.fit_transform(data), columns=data.columns)
print("Dữ liệu sau khi xử lý missing data:")
print(data_imputed.head())

# Câu 4
print("\nCâu 4:")
target_count = data_imputed['TenYearCHD'].value_counts()
print("Số lượng mẫu cho mỗi nhãn:")
print(target_count)
plt.figure(figsize=(6, 4))
target_count.plot(kind='bar', title='Count (target)')
plt.xlabel('Target')
plt.ylabel('Count')
plt.show()

# Câu 5
print("\nCâu 5:")
scaler = MinMaxScaler(feature_range=(-1, 1))
data_scaled = scaler.fit_transform(data_imputed)
print("Dữ liệu sau khi chuẩn hóa trong khoảng [-1, 1]:")
print(pd.DataFrame(data_scaled, columns=data.columns).head())

# Câu 6
print("\nCâu 6:")
X = pd.DataFrame(data_scaled, columns=data.columns).drop('TenYearCHD', axis=1)
y = data_scaled[:, -1]
selector = SelectKBest(score_func=f_classif, k='all')
selector.fit(X, y)
feature_scores = pd.DataFrame(selector.scores_, index=X.columns, columns=['Score'])
print(feature_scores)

# Câu 7
print("\nCâu 7:")
selected_features = feature_scores.nlargest(10, 'Score').index
X_selected = X[selected_features]
X_train, X_test, y_train, y_test = train_test_split(X_selected, y, test_size=0.2, random_state=42)

# Câu 8
print("\nCâu 8:")
models = [RandomForestClassifier(), LogisticRegression()]
for model in models:
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    acc = accuracy_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred)
    auc = roc_auc_score(y_test, y_pred)
    cm = confusion_matrix(y_test, y_pred)
    print("\nModel:", model.__class__.__name__)
    print("Accuracy:", acc)
    print("F1-score:", f1)
    print("Precision:", precision)
    print("AUC:", auc)
    print("Confusion Matrix:")
    print(cm)
    plt.figure()
    plt.matshow(cm, cmap='Blues')
    plt.colorbar()
    plt.xlabel('Predicted')
    plt.ylabel('True')
    plt.title('Confusion Matrix')
    plt.show()


